{
  "questions": [
    {
      "title": "What is Nuxt 3?",
      "options": [
        "A JavaScript library",
        "A Vue.js framework",
        "A type of fish",
        "A CSS framework"
      ],
      "correctIndex": 1,
      "explanation": "Nuxt 3 is a framework built on top of Vue.js for creating server-side rendered applications."
    },
    {
      "title": "Which of the following is a feature of Nuxt 3?",
      "options": [
        "Server-side rendering",
        "Client-side routing",
        "Global state management",
        "All options are correct"
      ],
      "correctIndex": 3,
      "explanation": "Nuxt 3 supports server-side rendering, client-side routing, and global state management."
    },
    {
      "title": "True or False: Nuxt 3 supports TypeScript out of the box.",
      "options": [
        "True",
        "False"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 has built-in support for TypeScript, making it easy to use in projects."
    },
    {
      "title": "How do you define a composable in Nuxt 3?",
      "options": [
        "Using `export function useComposable()`",
        "Using `export default function()`",
        "Using `defineComponent()`",
        "Using `new Vue()`"
      ],
      "correctIndex": 0,
      "explanation": "Composables are defined using `export function useComposable()` syntax in Nuxt 3."
    },
    {
      "title": "Which of the following is a built-in component in Nuxt 3?",
      "options": [
        "<NuxtLink>",
        "<NuxtImage>",
        "<NuxtForm>",
        "<NuxtData>"
      ],
      "correctIndex": 0,
      "explanation": "<NuxtLink> is a built-in component for client-side navigation in Nuxt 3."
    },
    {
      "title": "What is the default rendering mode in Nuxt 3?",
      "options": [
        "Server-side rendering",
        "Static site generation",
        "Client-side rendering",
        "Hybrid rendering"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 defaults to server-side rendering, enhancing performance and SEO."
    },
    {
      "title": "How do you use a ref in Nuxt 3?",
      "options": [
        "`const myRef = ref('value')`",
        "`let myRef = reactive('value')`",
        "`var myRef = computed('value')`",
        "`myRef = value`"
      ],
      "correctIndex": 0,
      "explanation": "Refs are created using the `ref()` function to hold reactive values."
    },
    {
      "title": "Which file is used to configure a Nuxt 3 project?",
      "options": [
        "nuxt.config.ts",
        "app.config.ts",
        "nuxt.config.js",
        "vue.config.js"
      ],
      "correctIndex": 0,
      "explanation": "The nuxt.config.ts file is used for configuring various aspects of a Nuxt 3 project."
    },
    {
      "title": "What is the purpose of the `pages` directory in Nuxt 3?",
      "options": [
        "To define application routes",
        "To store global components",
        "To manage application state",
        "To configure server middleware"
      ],
      "correctIndex": 0,
      "explanation": "The `pages` directory is used to define application routes automatically in Nuxt 3."
    },
    {
      "title": "Which of the following is a valid Nuxt 3 component file?",
      "options": [
        "`MyComponent.vue`",
        "`myComponent.js`",
        "`my-component.html`",
        "`MyComponent.jsx`"
      ],
      "correctIndex": 0,
      "explanation": "Component files in Nuxt 3 are typically `.vue` files, such as `MyComponent.vue`."
    },
    {
      "title": "How do you access the current route in a Nuxt 3 component?",
      "options": [
        "Using `useRoute()` composable",
        "Using `this.$route`",
        "Using `route()` function",
        "Using `router.currentRoute`"
      ],
      "correctIndex": 0,
      "explanation": "The `useRoute()` composable is used to access the current route in Nuxt 3."
    },
    {
      "title": "Which of the following is a correct way to define a reactive object in Nuxt 3?",
      "options": [
        "`const state = reactive({ count: 0 })`",
        "`let state = ref({ count: 0 })`",
        "`var state = computed({ count: 0 })`",
        "`state = reactive({ count: 0 })`"
      ],
      "correctIndex": 0,
      "explanation": "Reactive objects are defined using the `reactive()` function in Nuxt 3."
    },
    {
      "title": "What is the purpose of the `server/api` directory in Nuxt 3?",
      "options": [
        "To define server-side API routes",
        "To store client-side components",
        "To manage application state",
        "To configure environment variables"
      ],
      "correctIndex": 0,
      "explanation": "The `server/api` directory is used to define server-side API routes in Nuxt 3."
    },
    {
      "title": "Which of the following can be used to handle errors in Nuxt 3?",
      "options": [
        "error.vue",
        "middleware.js",
        "nuxt.config.ts",
        "store.js"
      ],
      "correctIndex": 0,
      "explanation": "The `error.vue` file can be used to handle errors globally in a Nuxt 3 application."
    },
    {
      "title": "How can you define a dynamic route in Nuxt 3?",
      "options": [
        "By using a file with an underscore prefix, e.g., `_id.vue`",
        "By creating a file named `dynamic.vue`",
        "By configuring in `nuxt.config.ts`",
        "By using `v-route` directive"
      ],
      "correctIndex": 0,
      "explanation": "Dynamic routes are defined by creating a file with an underscore prefix, e.g., `_id.vue`."
    },
    {
      "title": "Which of the following is true about Nuxt 3 deployment?",
      "options": [
        "Nuxt 3 can be deployed as a static site",
        "Nuxt 3 requires a dedicated server",
        "Nuxt 3 cannot be deployed to Vercel",
        "Nuxt 3 must be deployed with Docker"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 can be deployed as a static site, making it flexible for various hosting solutions."
    },
    {
      "title": "What is the use of the `<script setup>` block in Nuxt 3?",
      "options": [
        "To define component logic concisely",
        "To import global styles",
        "To configure server middleware",
        "To declare environment variables"
      ],
      "correctIndex": 0,
      "explanation": "The `<script setup>` block allows for a concise way to define component logic in Nuxt 3."
    },
    {
      "title": "Which of the following is a correct usage of `ref` in Nuxt 3?",
      "options": [
        "`const count = ref(0);`",
        "`let count = reactive(0);`",
        "`var count = computed(() => 0);`",
        "`count = 0;`"
      ],
      "correctIndex": 0,
      "explanation": "The correct usage is `const count = ref(0);` to create a reactive reference."
    },
    {
      "title": "How do you fetch data in a Nuxt 3 component?",
      "options": [
        "Using `useFetch()` composable",
        "Using `fetch()` in `mounted()`",
        "Using `axios` directly in `data()`",
        "Using `data-fetch` directive"
      ],
      "correctIndex": 0,
      "explanation": "Data can be fetched using the `useFetch()` composable in Nuxt 3 components."
    },
    {
      "title": "True or False: Nuxt 3 supports hybrid rendering.",
      "options": [
        "True",
        "False"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 supports hybrid rendering, combining server-side and client-side rendering."
    },
    {
      "title": "Which command is used to start a Nuxt 3 development server?",
      "options": [
        "`npm run dev`",
        "`nuxt start`",
        "`nuxt build`",
        "`npm start`"
      ],
      "correctIndex": 0,
      "explanation": "The `npm run dev` command is used to start a Nuxt 3 development server."
    },
    {
      "title": "What is the purpose of the `assets` directory in Nuxt 3?",
      "options": [
        "To store unprocessed assets like styles and images",
        "To store server-side scripts",
        "To store compiled JavaScript files",
        "To store HTML templates"
      ],
      "correctIndex": 0,
      "explanation": "The `assets` directory is used for unprocessed assets such as styles and images."
    },
    {
      "title": "How do you define a middleware in Nuxt 3?",
      "options": [
        "By creating a file in the `middleware/` directory",
        "By adding a function in `nuxt.config.ts`",
        "By defining a component in `components/`",
        "By setting a property in `app.config.ts`"
      ],
      "correctIndex": 0,
      "explanation": "Middleware is defined by creating a file in the `middleware/` directory."
    },
    {
      "title": "Which lifecycle hook is used for server-side data fetching in Nuxt 3?",
      "options": [
        "`asyncData`",
        "`mounted`",
        "`created`",
        "`beforeMount`"
      ],
      "correctIndex": 0,
      "explanation": "The `asyncData` lifecycle hook is used for server-side data fetching in Nuxt 3."
    },
    {
      "title": "True or False: Nuxt 3 can be used to create static websites.",
      "options": [
        "True",
        "False"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 supports static site generation, allowing the creation of static websites."
    },
    {
      "title": "Which of the following statements is true about Nuxt 3 routing?",
      "options": [
        "Routes are automatically generated based on the `pages` directory structure",
        "Routes must be manually defined in `nuxt.config.ts`",
        "Routes are defined using a `routes.js` file",
        "Nuxt 3 does not support dynamic routing"
      ],
      "correctIndex": 0,
      "explanation": "In Nuxt 3, routes are automatically generated based on the `pages` directory structure."
    },
    {
      "title": "What is the use of `useAsyncData` in Nuxt 3?",
      "options": [
        "To fetch data asynchronously in components",
        "To manage state globally",
        "To define server middleware",
        "To handle form submissions"
      ],
      "correctIndex": 0,
      "explanation": "`useAsyncData` is used to fetch data asynchronously in Nuxt 3 components."
    },
    {
      "title": "How do you create a server route in Nuxt 3?",
      "options": [
        "By creating a file in the `server/api` directory",
        "By defining a route in `nuxt.config.ts`",
        "By adding a function in `app.vue`",
        "By using the `createServerRoute()` function"
      ],
      "correctIndex": 0,
      "explanation": "Server routes are created by adding files to the `server/api` directory in Nuxt 3."
    },
    {
      "title": "Which of the following is true about Nuxt 3's `app.config.ts`?",
      "options": [
        "It is used to define application-wide settings",
        "It configures server-side rendering options",
        "It manages client-side routing",
        "It defines global middleware"
      ],
      "correctIndex": 0,
      "explanation": "`app.config.ts` is used to define application-wide settings in Nuxt 3."
    },
    {
      "title": "What is the purpose of the `public/` directory in Nuxt 3?",
      "options": [
        "To store publicly accessible files",
        "To define application routes",
        "To manage server-side scripts",
        "To compile JavaScript files"
      ],
      "correctIndex": 0,
      "explanation": "The `public/` directory is used for files that should be publicly accessible in a Nuxt 3 application."
    },
    {
      "title": "How do you define a Nuxt 3 plugin?",
      "options": [
        "By creating a file in the `plugins/` directory",
        "By adding a function in `nuxt.config.ts`",
        "By using the `createPlugin()` function",
        "By defining a component in `components/`"
      ],
      "correctIndex": 0,
      "explanation": "Plugins are defined by creating a file in the `plugins/` directory in Nuxt 3."
    },
    {
      "title": "True or False: Nuxt 3 uses Vue 3 as its core framework.",
      "options": [
        "True",
        "False"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 is built on top of Vue 3, leveraging its features and improvements."
    },
    {
      "title": "Which of the following is a benefit of using Nuxt 3?",
      "options": [
        "Improved SEO through server-side rendering",
        "Built-in support for mobile app development",
        "Automatic database integration",
        "Native support for GraphQL"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 improves SEO by utilizing server-side rendering capabilities."
    },
    {
      "title": "What is the purpose of the `components/` directory in Nuxt 3?",
      "options": [
        "To store reusable Vue components",
        "To define server-side scripts",
        "To manage application state",
        "To configure environment variables"
      ],
      "correctIndex": 0,
      "explanation": "The `components/` directory is used to store reusable Vue components in Nuxt 3."
    },
    {
      "title": "How do you use a `computed` property in Nuxt 3?",
      "options": [
        "`const result = computed(() => value * 2)`",
        "`let result = ref(value * 2)`",
        "`var result = reactive(value * 2)`",
        "`result = computed(value * 2)`"
      ],
      "correctIndex": 0,
      "explanation": "Computed properties are defined using the `computed()` function in Nuxt 3."
    },
    {
      "title": "Which of the following is true about Nuxt 3's `useRouter` composable?",
      "options": [
        "It provides access to the router instance",
        "It manages server-side rendering",
        "It handles global state management",
        "It configures API endpoints"
      ],
      "correctIndex": 0,
      "explanation": "`useRouter` provides access to the router instance in Nuxt 3 components."
    },
    {
      "title": "True or False: Nuxt 3 supports both server-side and client-side rendering.",
      "options": [
        "True",
        "False"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 supports both server-side and client-side rendering, offering flexibility in rendering modes."
    },
    {
      "title": "Which of the following is a correct way to define a reactive object in Nuxt 3?",
      "options": [
        "`const state = reactive({ count: 0 })`",
        "`let state = ref({ count: 0 })`",
        "`var state = computed({ count: 0 })`",
        "`state = reactive({ count: 0 })`"
      ],
      "correctIndex": 0,
      "explanation": "Reactive objects are defined using the `reactive()` function in Nuxt 3."
    },
    {
      "title": "How do you define a Nuxt 3 middleware?",
      "options": [
        "By creating a file in the `middleware/` directory",
        "By adding a function in `nuxt.config.ts`",
        "By defining a component in `components/`",
        "By setting a property in `app.config.ts`"
      ],
      "correctIndex": 0,
      "explanation": "Middleware is defined by creating a file in the `middleware/` directory."
    },
    {
      "title": "Which of the following is true about Nuxt 3's `useFetch` composable?",
      "options": [
        "It is used to fetch data asynchronously in components",
        "It manages global state",
        "It handles form submissions",
        "It defines server middleware"
      ],
      "correctIndex": 0,
      "explanation": "`useFetch` is used to fetch data asynchronously in Nuxt 3 components."
    },
    {
      "title": "What is the purpose of the `layouts/` directory in Nuxt 3?",
      "options": [
        "To define different layouts for pages",
        "To store reusable components",
        "To manage server-side scripts",
        "To configure application settings"
      ],
      "correctIndex": 0,
      "explanation": "The `layouts/` directory is used to define different layouts for pages in Nuxt 3."
    },
    {
      "title": "True or False: In Nuxt 3, the `pages` directory is used to define API endpoints.",
      "options": [
        "False",
        "True"
      ],
      "correctIndex": 0,
      "explanation": "The `pages` directory is used to define routes, not API endpoints, in Nuxt 3."
    },
    {
      "title": "How do you define a plugin in Nuxt 3?",
      "options": [
        "By creating a file in the `plugins/` directory",
        "By adding a function in `nuxt.config.ts`",
        "By using the `createPlugin()` function",
        "By defining a component in `components/`"
      ],
      "correctIndex": 0,
      "explanation": "Plugins are defined by creating a file in the `plugins/` directory in Nuxt 3."
    },
    {
      "title": "Which of the following is true about Nuxt 3's `useState` composable?",
      "options": [
        "It is used to manage state across components",
        "It defines server middleware",
        "It fetches data from APIs",
        "It creates dynamic routes"
      ],
      "correctIndex": 0,
      "explanation": "`useState` is a composable used to manage state across components in Nuxt 3."
    },
    {
      "title": "True or False: Nuxt 3 automatically generates routes based on the `pages` directory structure.",
      "options": [
        "True",
        "False"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 automatically generates application routes based on the `pages` directory structure."
    },
    {
      "title": "What is the purpose of the `server/api` directory in Nuxt 3?",
      "options": [
        "To define server-side API routes",
        "To store client-side components",
        "To manage application state",
        "To configure environment variables"
      ],
      "correctIndex": 0,
      "explanation": "The `server/api` directory is used to define server-side API routes in Nuxt 3."
    },
    {
      "title": "Which of the following can be used to handle errors in Nuxt 3?",
      "options": [
        "error.vue",
        "middleware.js",
        "nuxt.config.ts",
        "store.js"
      ],
      "correctIndex": 0,
      "explanation": "The `error.vue` file can be used to handle errors globally in a Nuxt 3 application."
    },
    {
      "title": "How can you define a dynamic route in Nuxt 3?",
      "options": [
        "By using a file with an underscore prefix, e.g., `_id.vue`",
        "By creating a file named `dynamic.vue`",
        "By configuring in `nuxt.config.ts`",
        "By using `v-route` directive"
      ],
      "correctIndex": 0,
      "explanation": "Dynamic routes are defined by creating a file with an underscore prefix, e.g., `_id.vue`."
    },
    {
      "title": "Which of the following is true about Nuxt 3 deployment?",
      "options": [
        "Nuxt 3 can be deployed as a static site",
        "Nuxt 3 requires a dedicated server",
        "Nuxt 3 cannot be deployed to Vercel",
        "Nuxt 3 must be deployed with Docker"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 can be deployed as a static site, making it flexible for various hosting solutions."
    },
    {
      "title": "What is the use of the `<script setup>` block in Nuxt 3?",
      "options": [
        "To define component logic concisely",
        "To import global styles",
        "To configure server middleware",
        "To declare environment variables"
      ],
      "correctIndex": 0,
      "explanation": "The `<script setup>` block allows for a concise way to define component logic in Nuxt 3."
    },
    {
      "title": "Which of the following is a correct usage of `ref` in Nuxt 3?",
      "options": [
        "`const count = ref(0);`",
        "`let count = reactive(0);`",
        "`var count = computed(() => 0);`",
        "`count = 0;`"
      ],
      "correctIndex": 0,
      "explanation": "The correct usage is `const count = ref(0);` to create a reactive reference."
    },
    {
      "title": "How do you fetch data in a Nuxt 3 component?",
      "options": [
        "Using `useFetch()` composable",
        "Using `fetch()` in `mounted()`",
        "Using `axios` directly in `data()`",
        "Using `data-fetch` directive"
      ],
      "correctIndex": 0,
      "explanation": "Data can be fetched using the `useFetch()` composable in Nuxt 3 components."
    },
    {
      "title": "True or False: Nuxt 3 supports hybrid rendering.",
      "options": [
        "True",
        "False"
      ],
      "correctIndex": 0,
      "explanation": "Nuxt 3 supports hybrid rendering, combining server-side and client-side rendering."
    },
    {
      "title": "Which command is used to start a Nuxt 3 development server?",
      "options": [
        "`npm run dev`",
        "`nuxt start`",
        "`nuxt build`",
        "`npm start`"
      ],
      "correctIndex": 0,
      "explanation": "The `npm run dev` command is used to start a Nuxt 3 development server."
    },
    {
      "title": "What is the purpose of the `assets` directory in Nuxt 3?",
      "options": [
        "To store unprocessed assets like styles and images",
        "To store server-side scripts",
        "To store compiled JavaScript files",
        "To store HTML templates"
      ],
      "correctIndex": 0,
      "explanation": "The `assets` directory is used for unprocessed assets such as styles and images."
    },
    {
      "title": "How do you define a middleware in Nuxt 3?",
      "options": [
        "By creating a file in the `middleware/` directory",
        "By adding a function in `nuxt.config.ts`",
        "By defining a component in `components/`",
        "By setting a property in `app.config.ts`"
      ],
      "correctIndex": 0,
      "explanation": "Middleware is defined by creating a file in the `middleware/` directory."
    }
  ]
}
