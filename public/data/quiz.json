{
  "questions": [
    {
      "title": "What is Nuxt 3?",
      "options": [
        {
          "id": "1",
          "text": "A serverless database"
        },
        {
          "id": "2",
          "text": "A Vue.js Framework"
        }
      ],
      "correctId": "2",
      "explanation": "Nuxt 3 is a Vue 3â€“based framework for building web apps."
    },
    {
      "title": "Which command creates a new Nuxt 3 project?",
      "options": [
        {
          "id": "1",
          "text": "npx nuxi init my-app"
        },
        {
          "id": "2",
          "text": "npm init vue@latest my-app"
        },
        {
          "id": "3",
          "text": "nuxt create my-app"
        }
      ],
      "correctId": "1",
      "explanation": "Use the Nuxt CLI `nuxi` to scaffold projects."
    },
    {
      "title": "Where do you put public, unprocessed static files in Nuxt 3?",
      "options": [
        {
          "id": "1",
          "text": "/assets"
        },
        {
          "id": "2",
          "text": "/public"
        },
        {
          "id": "3",
          "text": "/static"
        }
      ],
      "correctId": "2",
      "explanation": "Files in `/public` are served as-is at the site root."
    },
    {
      "title": "Which directory defines API routes in Nuxt 3?",
      "options": [
        {
          "id": "1",
          "text": "server/api"
        },
        {
          "id": "2",
          "text": "pages/api"
        },
        {
          "id": "3",
          "text": "api"
        }
      ],
      "correctId": "1",
      "explanation": "Nitro server routes live under `server/api`."
    },
    {
      "title": "What does `useState` do in Nuxt 3?",
      "options": [
        {
          "id": "1",
          "text": "Creates a globally shared reactive state across all users"
        },
        {
          "id": "2",
          "text": "Creates a universal reactive state scoped per request on the server"
        }
      ],
      "correctId": "2",
      "explanation": "`useState` is per-request on server and universal across SSR/CSR."
    },
    {
      "title": "Pick the correct `useState` usage in `<script setup>`",
      "options": [
        {
          "id": "1",
          "text": "const count = ref(0)"
        },
        {
          "id": "2",
          "text": "const count = useState('count', () => 0)"
        },
        {
          "id": "3",
          "text": "const { count } = useState('count')"
        }
      ],
      "correctId": "2",
      "explanation": "`useState(key, init)` returns a ref; provide a key and initializer."
    },
    {
      "title": "Which file configures Nuxt modules and build options?",
      "options": [
        {
          "id": "1",
          "text": "nuxt.config.ts"
        },
        {
          "id": "2",
          "text": "app.config.ts"
        },
        {
          "id": "3",
          "text": "vite.config.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Project-wide config lives in `nuxt.config.ts`."
    },
    {
      "title": "Where do you set public app-level UI defaults (e.g., site name)?",
      "options": [
        {
          "id": "1",
          "text": "app.config.ts"
        },
        {
          "id": "2",
          "text": ".env only"
        },
        {
          "id": "3",
          "text": "pages/app.vue"
        }
      ],
      "correctId": "1",
      "explanation": "`app.config.ts` provides typed public config; avoid secrets."
    },
    {
      "title": "True or False: Nuxt 3 uses Vue 3 and Vite by default.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt 3 is built on Vue 3 and Vite."
    },
    {
      "title": "Which built-in component handles document metadata?",
      "options": [
        {
          "id": "1",
          "text": "<Head>"
        },
        {
          "id": "2",
          "text": "<NuxtLayout>"
        },
        {
          "id": "3",
          "text": "<NuxtPage>"
        }
      ],
      "correctId": "1",
      "explanation": "Use `<Head>` (or `useHead`/`useSeoMeta`) for meta tags."
    },
    {
      "title": "Fetch data in a page with `useFetch` (SSR-compatible).",
      "options": [
        {
          "id": "1",
          "text": "const { data, error } = await useFetch('/api/posts')"
        },
        {
          "id": "2",
          "text": "const data = fetch('/api/posts')"
        },
        {
          "id": "3",
          "text": "await $fetch.use('/api/posts')"
        }
      ],
      "correctId": "1",
      "explanation": "`useFetch` returns reactive refs and works SSR/CSR."
    },
    {
      "title": "Which directory auto-registers Vue components?",
      "options": [
        {
          "id": "1",
          "text": "components/"
        },
        {
          "id": "2",
          "text": "composables/"
        },
        {
          "id": "3",
          "text": "plugins/"
        }
      ],
      "correctId": "1",
      "explanation": "Components in `components/` are auto-imported."
    },
    {
      "title": "Define a dynamic route for a blog post slug.",
      "options": [
        {
          "id": "1",
          "text": "pages/blog/_slug.vue"
        },
        {
          "id": "2",
          "text": "pages/blog/[slug].vue"
        },
        {
          "id": "3",
          "text": "pages/[blog]/slug.vue"
        }
      ],
      "correctId": "2",
      "explanation": "Nuxt 3 uses bracket syntax for dynamic params."
    },
    {
      "title": "Add global CSS (e.g., Tailwind entry)",
      "options": [
        {
          "id": "1",
          "text": "nuxt.config.ts -> css: ['~/assets/main.css']"
        },
        {
          "id": "2",
          "text": "app.config.ts -> css"
        },
        {
          "id": "3",
          "text": "components/Global.css"
        }
      ],
      "correctId": "1",
      "explanation": "Declare global CSS in `nuxt.config.ts` under `css`."
    },
    {
      "title": "Server API handler (GET) returning JSON",
      "options": [
        {
          "id": "1",
          "text": "// server/api/hello.get.ts  export default defineEventHandler(() => ({ msg: 'hi' }))"
        },
        {
          "id": "2",
          "text": "// api/hello.ts  export default (req, res) => res.send('hi')"
        }
      ],
      "correctId": "1",
      "explanation": "Use Nitro handlers in `server/api` with `defineEventHandler`."
    },
    {
      "title": "Access query params in a server route",
      "options": [
        {
          "id": "1",
          "text": "getQuery(event)"
        },
        {
          "id": "2",
          "text": "useRoute().query"
        },
        {
          "id": "3",
          "text": "context.query"
        }
      ],
      "correctId": "1",
      "explanation": "On the server, use `getQuery(event)` (from h3)."
    },
    {
      "title": "True or False: `app.vue` should include `<NuxtPage />`.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "`app.vue` is the root and renders the current page."
    },
    {
      "title": "Define a layout correctly",
      "options": [
        {
          "id": "1",
          "text": "<!-- layouts/default.vue --> <template><div><Nav /><slot /></div></template>"
        },
        {
          "id": "2",
          "text": "<!-- pages/layout.vue --> <template><slot/></template>"
        }
      ],
      "correctId": "1",
      "explanation": "Layouts live under `layouts/` and expose a slot."
    },
    {
      "title": "Set a page layout from `<script setup>`",
      "options": [
        {
          "id": "1",
          "text": "definePageMeta({ layout: 'admin' })"
        },
        {
          "id": "2",
          "text": "useLayout('admin')"
        },
        {
          "id": "3",
          "text": "setLayout('admin')"
        }
      ],
      "correctId": "1",
      "explanation": "Use `definePageMeta` to choose a layout."
    },
    {
      "title": "Rendering modes supported by Nuxt 3",
      "options": [
        {
          "id": "1",
          "text": "SSR, SSG (prerender) and client-only pages"
        },
        {
          "id": "2",
          "text": "CSR only"
        },
        {
          "id": "3",
          "text": "SSR only"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt supports SSR, SSG and SPA pages."
    },
    {
      "title": "Disable SSR for a single page",
      "options": [
        {
          "id": "1",
          "text": "definePageMeta({ ssr: false })"
        },
        {
          "id": "2",
          "text": "export const ssr = false in the page SFC"
        },
        {
          "id": "3",
          "text": "nuxt.config.ts -> ssr: false (global)"
        }
      ],
      "correctId": "1",
      "explanation": "Per-page SSR can be disabled via `definePageMeta`."
    },
    {
      "title": "Use `useRoute` in `<script setup>`",
      "options": [
        {
          "id": "1",
          "text": "const route = useRoute(); const slug = route.params.slug"
        },
        {
          "id": "2",
          "text": "import { useRoute } from 'vue-router'"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt auto-imports `useRoute`; no manual import needed."
    },
    {
      "title": "Add Nuxt modules like `@nuxtjs/tailwindcss`",
      "options": [
        {
          "id": "1",
          "text": "nuxt.config.ts -> modules: []"
        },
        {
          "id": "2",
          "text": "app.config.ts -> modules: []"
        },
        {
          "id": "3",
          "text": "package.json -> modules"
        }
      ],
      "correctId": "1",
      "explanation": "Configure modules in `nuxt.config.ts`."
    },
    {
      "title": "Use `useAsyncData` properly",
      "options": [
        {
          "id": "1",
          "text": "const { data, pending, error } = await useAsyncData('posts', () => $fetch('/api/posts'))"
        },
        {
          "id": "2",
          "text": "const data = await useAsyncData(() => fetch('/api/posts'))"
        }
      ],
      "correctId": "1",
      "explanation": "Provide a key and a function returning a promise."
    },
    {
      "title": "Define a plugin that injects `$hello`",
      "options": [
        {
          "id": "1",
          "text": "// plugins/hello.ts  export default defineNuxtPlugin(() => ({ provide: { hello: () => 'hi' } }))"
        },
        {
          "id": "2",
          "text": "// plugin/hello.ts  export default () => {}"
        }
      ],
      "correctId": "1",
      "explanation": "Use `defineNuxtPlugin` in `plugins/`."
    },
    {
      "title": "True or False: Composables in `composables/` are auto-imported.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "Functions in `composables/` are auto-imported."
    },
    {
      "title": "Which statement about `assets/` is correct?",
      "options": [
        {
          "id": "1",
          "text": "Files in `assets/` are processed by Vite (e.g., SCSS, images)."
        },
        {
          "id": "2",
          "text": "Files in `assets/` are served raw at `/`."
        },
        {
          "id": "3",
          "text": "There is no difference between `assets/` and `public/`."
        }
      ],
      "correctId": "1",
      "explanation": "`assets/` is bundled; `public/` is raw."
    },
    {
      "title": "Add route middleware globally",
      "options": [
        {
          "id": "1",
          "text": "Create `middleware/auth.global.ts` exporting a handler"
        },
        {
          "id": "2",
          "text": "Add `middleware` in `app.config.ts`"
        },
        {
          "id": "3",
          "text": "Place file under `plugins/middleware.ts`"
        }
      ],
      "correctId": "1",
      "explanation": "Global middleware uses the `.global` suffix in `middleware/`."
    },
    {
      "title": "Global error page location",
      "options": [
        {
          "id": "1",
          "text": "error.vue at project root"
        },
        {
          "id": "2",
          "text": "pages/error.vue"
        },
        {
          "id": "3",
          "text": "layouts/error.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt uses a root-level `error.vue`."
    },
    {
      "title": "Throw an HTTP 400 in a server route",
      "options": [
        {
          "id": "1",
          "text": "throw createError({ statusCode: 400, statusMessage: 'Bad Request' })"
        },
        {
          "id": "2",
          "text": "throw new Error('400')"
        }
      ],
      "correctId": "1",
      "explanation": "Use `createError` for HTTP errors."
    },
    {
      "title": "True or False: `useHead` works in components and pages.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "`useHead` works in any setup context."
    },
    {
      "title": "Read runtime config on the server",
      "options": [
        {
          "id": "1",
          "text": "const config = useRuntimeConfig(); config.apiSecret"
        },
        {
          "id": "2",
          "text": "process.env only"
        }
      ],
      "correctId": "1",
      "explanation": "`useRuntimeConfig()` gives typed access to runtime config."
    },
    {
      "title": "Render the current page inside a layout",
      "options": [
        {
          "id": "1",
          "text": "<NuxtPage />"
        },
        {
          "id": "2",
          "text": "<RouterView />"
        },
        {
          "id": "3",
          "text": "<slot /> only"
        }
      ],
      "correctId": "1",
      "explanation": "`<NuxtPage />` is Nuxtâ€™s router view."
    },
    {
      "title": "Define a page title properly (SSR-friendly)",
      "options": [
        {
          "id": "1",
          "text": "useHead({ title: 'Home' })"
        },
        {
          "id": "2",
          "text": "document.title = 'Home'"
        }
      ],
      "correctId": "1",
      "explanation": "`useHead` is SSR-friendly and reactive."
    },
    {
      "title": "Render a client-only component during SSR",
      "options": [
        {
          "id": "1",
          "text": "Wrap with <ClientOnly> ... </ClientOnly>"
        },
        {
          "id": "2",
          "text": "Disable SSR globally in nuxt.config.ts"
        },
        {
          "id": "3",
          "text": "Use a `v-client` directive"
        }
      ],
      "correctId": "1",
      "explanation": "Use the built-in `<ClientOnly>` component."
    },
    {
      "title": "Read JSON body in a server handler",
      "options": [
        {
          "id": "1",
          "text": "const body = await readBody(event)"
        },
        {
          "id": "2",
          "text": "req.body"
        }
      ],
      "correctId": "1",
      "explanation": "Use `readBody(event)` in Nitro routes."
    },
    {
      "title": "True or False: `app.config.ts` is publicly available on the client.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "It is bundled client-side for UI defaults; avoid secrets."
    },
    {
      "title": "Declare per-page middleware",
      "options": [
        {
          "id": "1",
          "text": "definePageMeta({ middleware: 'auth' })"
        },
        {
          "id": "2",
          "text": "useHead({ middleware: 'auth' })"
        }
      ],
      "correctId": "1",
      "explanation": "Attach middleware with `definePageMeta`."
    },
    {
      "title": "What does `nuxi dev` do?",
      "options": [
        {
          "id": "1",
          "text": "Starts the Nuxt development server"
        },
        {
          "id": "2",
          "text": "Runs unit tests"
        },
        {
          "id": "3",
          "text": "Deploys to production"
        }
      ],
      "correctId": "1",
      "explanation": "It launches the local dev server with HMR."
    },
    {
      "title": "Programmatic navigation in Nuxt 3",
      "options": [
        {
          "id": "1",
          "text": "const router = useRouter(); router.push('/about')"
        },
        {
          "id": "2",
          "text": "await navigateTo('/about')"
        },
        {
          "id": "3",
          "text": "All options are correct"
        }
      ],
      "correctId": "3",
      "explanation": "Both `useRouter().push` and `navigateTo` are valid."
    },
    {
      "title": "Which runs on the server during SSR to fetch data?",
      "options": [
        {
          "id": "1",
          "text": "onMounted"
        },
        {
          "id": "2",
          "text": "useAsyncData/useFetch (server side)"
        },
        {
          "id": "3",
          "text": "onBeforeMount"
        }
      ],
      "correctId": "2",
      "explanation": "Data fetching composables run during SSR."
    },
    {
      "title": "Add a route alias for a page",
      "options": [
        {
          "id": "1",
          "text": "definePageMeta({ alias: ['/home'] })"
        },
        {
          "id": "2",
          "text": "nuxt.config.ts -> router.alias"
        },
        {
          "id": "3",
          "text": "No option is correct"
        }
      ],
      "correctId": "1",
      "explanation": "Use `definePageMeta` to define per-page aliases."
    },
    {
      "title": "True or False: `useState` values are shared between users in production.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "2",
      "explanation": "Server state is scoped per request; not shared."
    },
    {
      "title": "Access a plugin injection named `$hello`",
      "options": [
        {
          "id": "1",
          "text": "const { $hello } = useNuxtApp(); $hello()"
        },
        {
          "id": "2",
          "text": "import { $hello } from '@/plugins/hello'"
        },
        {
          "id": "3",
          "text": "window.$hello()"
        }
      ],
      "correctId": "1",
      "explanation": "Use `useNuxtApp()` to access provided values."
    },
    {
      "title": "Minimal `app.vue` structure",
      "options": [
        {
          "id": "1",
          "text": "<template><NuxtLayout><NuxtPage /></NuxtLayout></template>"
        },
        {
          "id": "2",
          "text": "<template><RouterView/></template>"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt uses `<NuxtLayout>` and `<NuxtPage>`."
    },
    {
      "title": "Set default page transitions for all pages",
      "options": [
        {
          "id": "1",
          "text": "app.config.ts via defineAppConfig({ pageTransition: {...} })"
        },
        {
          "id": "2",
          "text": "Only inside each pageâ€™s `<script setup>`"
        },
        {
          "id": "3",
          "text": "Nuxt has no API"
        }
      ],
      "correctId": "1",
      "explanation": "Define defaults in `app.config.ts`."
    },
    {
      "title": "Create a typed counter composable",
      "options": [
        {
          "id": "1",
          "text": "// composables/useCounter.ts  export const useCounter = () => useState<number>('counter', () => 0)"
        },
        {
          "id": "2",
          "text": "export default function useCounter(){ return 0 }"
        }
      ],
      "correctId": "1",
      "explanation": "Return a shared typed `ref` from `useState`."
    },
    {
      "title": "True or False: The `pages/` directory is required in every Nuxt app.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "2",
      "explanation": "You can build apps without pages."
    },
    {
      "title": "`navigateTo` works on server and client.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "`navigateTo` is universal."
    },
    {
      "title": "Which statement about deployment is correct?",
      "options": [
        {
          "id": "1",
          "text": "`nuxi generate` produces a static site for SSG."
        },
        {
          "id": "2",
          "text": "`nuxi build` only outputs static HTML."
        },
        {
          "id": "3",
          "text": "Nuxt 3 cannot run on Node servers."
        }
      ],
      "correctId": "1",
      "explanation": "`generate` outputs a prerendered site."
    },
    {
      "title": "Access route params in a page",
      "options": [
        {
          "id": "1",
          "text": "const route = useRoute(); route.params.id"
        },
        {
          "id": "2",
          "text": "this.$route.params.id"
        },
        {
          "id": "3",
          "text": "getQuery(event).id"
        }
      ],
      "correctId": "1",
      "explanation": "Use `useRoute()` in the composition API."
    },
    {
      "title": "Auto-import a composable without manual imports",
      "options": [
        {
          "id": "1",
          "text": "Place it in `composables/` and call it directly"
        },
        {
          "id": "2",
          "text": "Register it in `plugins/`"
        },
        {
          "id": "3",
          "text": "Add to `nuxt.config.ts -> modules`"
        }
      ],
      "correctId": "1",
      "explanation": "Anything in `composables/` is auto-imported."
    },
    {
      "title": "True or False: You can have server utilities in `server/utils`.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "The `server/` directory supports utilities and more."
    },
    {
      "title": "Use `useFetch` with query parameters",
      "options": [
        {
          "id": "1",
          "text": "const { data } = await useFetch('/api/post', { query: { id: 1 } })"
        },
        {
          "id": "2",
          "text": "const { data } = await useFetch('/api/post?id=1', { query: {} })"
        }
      ],
      "correctId": "1",
      "explanation": "Pass `query` and let Nuxt build the URL."
    },
    {
      "title": "Expose runtime config safely",
      "options": [
        {
          "id": "1",
          "text": "nuxt.config.ts -> runtimeConfig: { apiSecret: process.env.API_SECRET, public: { apiBase: '/api' } }"
        },
        {
          "id": "2",
          "text": "nuxt.config.ts -> publicRuntimeConfig only"
        }
      ],
      "correctId": "1",
      "explanation": "Use `runtimeConfig` with a `public` section for client-safe values."
    },
    {
      "title": "Lazy-load an image using Nuxt Image module",
      "options": [
        {
          "id": "1",
          "text": "<NuxtImg loading='lazy' src='/img.png' />"
        },
        {
          "id": "2",
          "text": "<img nuxt-lazy src='/img.png'>"
        },
        {
          "id": "3",
          "text": "No option is correct"
        }
      ],
      "correctId": "1",
      "explanation": "With the image module, `<NuxtImg>` supports `loading='lazy'`."
    },
    {
      "title": "Set page-specific middleware and title (best practice)",
      "options": [
        {
          "id": "1",
          "text": "definePageMeta({ middleware: 'auth' }); useHead({ title: 'Dashboard' })"
        },
        {
          "id": "2",
          "text": "useHead({ middleware: 'auth', title: 'Dashboard' })"
        },
        {
          "id": "3",
          "text": "Only `app.config.ts` can set titles"
        }
      ],
      "correctId": "1",
      "explanation": "Use `definePageMeta` for middleware and `useHead` for title."
    },
    {
      "title": "True or False: `ref` and `reactive` from Vue work in Nuxt 3.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt 3 uses Vue 3â€™s reactivity."
    },
    {
      "title": "Correct `<script setup>` usage in a page",
      "options": [
        {
          "id": "1",
          "text": "<script setup lang='ts'> const msg = ref('Hello') </script> <template><p>{{ msg }}</p></template>"
        },
        {
          "id": "2",
          "text": "<script> setup(){ return { msg: 'Hello' } } </script>"
        }
      ],
      "correctId": "1",
      "explanation": "`<script setup>` is the recommended SFC syntax."
    },
    {
      "title": "Which statement about `useAsyncData` caching is correct?",
      "options": [
        {
          "id": "1",
          "text": "Caches per key during a request and can persist between navigations"
        },
        {
          "id": "2",
          "text": "Never caches results"
        },
        {
          "id": "3",
          "text": "Caching only works with `fetch()`"
        }
      ],
      "correctId": "1",
      "explanation": "Caching is keyed and improves SSR/CSR performance."
    },
    {
      "title": "SSR-only code guard",
      "options": [
        {
          "id": "1",
          "text": "if (process.server) { /* SSR-only */ }"
        },
        {
          "id": "2",
          "text": "if (window.isServer) { /* SSR-only */ }"
        }
      ],
      "correctId": "1",
      "explanation": "Use `process.server`/`process.client`."
    },
    {
      "title": "Where should you store fonts to be processed by the bundler?",
      "options": [
        {
          "id": "1",
          "text": "assets/"
        },
        {
          "id": "2",
          "text": "public/"
        }
      ],
      "correctId": "1",
      "explanation": "Use `assets/` so Vite can process and hash them."
    },
    {
      "title": "Reference a file inside `public/`",
      "options": [
        {
          "id": "1",
          "text": "Use absolute path from root, e.g., `/favicon.ico`"
        },
        {
          "id": "2",
          "text": "Import from `@/public` in code"
        }
      ],
      "correctId": "1",
      "explanation": "Files in `public/` are served at the root URL."
    },
    {
      "title": "Create dynamic server API route for `/api/users/[id]` (GET)",
      "options": [
        {
          "id": "1",
          "text": "server/api/users/[id].get.ts"
        },
        {
          "id": "2",
          "text": "pages/api/users/[id].ts"
        },
        {
          "id": "3",
          "text": "server/routes/users/[id].get.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Place Nitro handlers under `server/api` with method suffix."
    },
    {
      "title": "Return an error page from the client without throwing",
      "options": [
        {
          "id": "1",
          "text": "showError({ statusCode: 404, statusMessage: 'Not Found' })"
        },
        {
          "id": "2",
          "text": "throw new Error(404)"
        },
        {
          "id": "3",
          "text": "navigateTo('/__error')"
        }
      ],
      "correctId": "1",
      "explanation": "`showError` renders the global error page."
    },
    {
      "title": "Set SEO meta in a component",
      "options": [
        {
          "id": "1",
          "text": "useSeoMeta({ title: 'Home', description: 'Welcome' })"
        },
        {
          "id": "2",
          "text": "document.head.append('<meta ...>')"
        },
        {
          "id": "3",
          "text": "Only in nuxt.config.ts"
        }
      ],
      "correctId": "1",
      "explanation": "`useSeoMeta` is a wrapper over head tags."
    },
    {
      "title": "Path alias for source directory in Nuxt 3",
      "options": [
        {
          "id": "1",
          "text": "~/"
        },
        {
          "id": "2",
          "text": "@@"
        },
        {
          "id": "3",
          "text": "$root/"
        }
      ],
      "correctId": "1",
      "explanation": "`~/` resolves to the source directory."
    },
    {
      "title": "Register global components automatically",
      "options": [
        {
          "id": "1",
          "text": "Place them in `components/`"
        },
        {
          "id": "2",
          "text": "Register in `main.ts`"
        },
        {
          "id": "3",
          "text": "Only via `app.component()`"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt auto-imports from `components/`."
    },
    {
      "title": "Define a named route middleware",
      "options": [
        {
          "id": "1",
          "text": "// middleware/auth.ts  export default defineNuxtRouteMiddleware((to, from) => { /* ... */ })"
        },
        {
          "id": "2",
          "text": "// middleware/auth.js  export default (to, from) => { /* ... */ }"
        },
        {
          "id": "3",
          "text": "// plugins/auth.ts  defineNuxtRouteMiddleware(...)"
        }
      ],
      "correctId": "1",
      "explanation": "Use `defineNuxtRouteMiddleware` in `middleware/`."
    },
    {
      "title": "Pre-render (SSG) a specific route",
      "options": [
        {
          "id": "1",
          "text": "nuxt.config.ts -> routeRules: { '/about': { prerender: true } }"
        },
        {
          "id": "2",
          "text": "app.config.ts -> ssg: ['/about']"
        },
        {
          "id": "3",
          "text": "pages/about.vue -> export const prerender = true"
        }
      ],
      "correctId": "1",
      "explanation": "Use `routeRules` in config."
    },
    {
      "title": "Valid ways to set meta tags",
      "options": [
        {
          "id": "1",
          "text": "useHead({ meta: [{ name: 'description', content: '...' }] })"
        },
        {
          "id": "2",
          "text": "useSeoMeta({ description: '...' })"
        },
        {
          "id": "3",
          "text": "All options are correct"
        }
      ],
      "correctId": "3",
      "explanation": "`useHead` and `useSeoMeta` both work."
    },
    {
      "title": "Create and read a cookie in a server handler",
      "options": [
        {
          "id": "1",
          "text": "setCookie(event, 'token', 'abc'); const v = getCookie(event, 'token')"
        },
        {
          "id": "2",
          "text": "document.cookie = 'token=abc'; req.cookies.token"
        },
        {
          "id": "3",
          "text": "cookies.set('token', 'abc'); cookies.get('token')"
        }
      ],
      "correctId": "1",
      "explanation": "Use h3 helpers in Nitro."
    },
    {
      "title": "Which statement about `public/` is correct?",
      "options": [
        {
          "id": "1",
          "text": "Files are copied as-is and not processed by Vite."
        },
        {
          "id": "2",
          "text": "Files are hashed and referenced via imports."
        },
        {
          "id": "3",
          "text": "They are bundled into JavaScript."
        }
      ],
      "correctId": "1",
      "explanation": "`public/` is for raw assets."
    },
    {
      "title": "Best directory for global SCSS variables and mixins",
      "options": [
        {
          "id": "1",
          "text": "assets/"
        },
        {
          "id": "2",
          "text": "public/"
        },
        {
          "id": "3",
          "text": "server/"
        }
      ],
      "correctId": "1",
      "explanation": "SCSS in `assets/` is processed by Vite."
    },
    {
      "title": "Enable a module in `nuxt.config.ts`",
      "options": [
        {
          "id": "1",
          "text": "export default defineNuxtConfig({ modules: ['@nuxtjs/tailwindcss'] })"
        },
        {
          "id": "2",
          "text": "export default { tailwind: true }"
        },
        {
          "id": "3",
          "text": "export default defineAppConfig({ modules: [...] })"
        }
      ],
      "correctId": "1",
      "explanation": "Modules go in `defineNuxtConfig`."
    },
    {
      "title": "Add a global page transition in `app.config.ts`",
      "options": [
        {
          "id": "1",
          "text": "export default defineAppConfig({ pageTransition: { name: 'fade', mode: 'out-in' } })"
        },
        {
          "id": "2",
          "text": "export default defineNuxtConfig({ pageTransition: { name: 'fade' } })"
        }
      ],
      "correctId": "1",
      "explanation": "Use `defineAppConfig` for default page transitions."
    },
    {
      "title": "Use a composable from `composables/`",
      "options": [
        {
          "id": "1",
          "text": "Call it directly: const count = useCounter()"
        },
        {
          "id": "2",
          "text": "import { useCounter } from '@/composables/useCounter'"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt auto-imports composables."
    },
    {
      "title": "True or False: You can read `process.env.MY_VAR` anywhere on client.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "2",
      "explanation": "Prefer `runtimeConfig` for client-safe access."
    },
    {
      "title": "POST endpoint at `/api/login` via filename",
      "options": [
        {
          "id": "1",
          "text": "server/api/login.post.ts"
        },
        {
          "id": "2",
          "text": "server/api/login.ts"
        },
        {
          "id": "3",
          "text": "server/routes/login.post.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Use method suffix `.post.ts` inside `server/api`."
    },
    {
      "title": "Where to put images you want to import and be processed?",
      "options": [
        {
          "id": "1",
          "text": "assets/"
        },
        {
          "id": "2",
          "text": "public/"
        }
      ],
      "correctId": "1",
      "explanation": "Bundled imports should live in `assets/`."
    },
    {
      "title": "Guard a page for authenticated users only",
      "options": [
        {
          "id": "1",
          "text": "definePageMeta({ middleware: 'auth' }) and implement `middleware/auth.ts`"
        },
        {
          "id": "2",
          "text": "Check inside `onMounted` and redirect manually only"
        },
        {
          "id": "3",
          "text": "Create `pages/_middleware.vue`"
        }
      ],
      "correctId": "1",
      "explanation": "Use route middleware for guards."
    },
    {
      "title": "Server vs client composables",
      "options": [
        {
          "id": "1",
          "text": "Composables can branch with `process.server`/`process.client`"
        },
        {
          "id": "2",
          "text": "Composables run only on the client"
        },
        {
          "id": "3",
          "text": "Composables run only on the server"
        }
      ],
      "correctId": "1",
      "explanation": "They can run in both contexts."
    },
    {
      "title": "`pages/` routing basics",
      "options": [
        {
          "id": "1",
          "text": "Index routes use `pages/index.vue`"
        },
        {
          "id": "2",
          "text": "Nested routes follow folder structure"
        },
        {
          "id": "3",
          "text": "All options are correct"
        }
      ],
      "correctId": "3",
      "explanation": "Nuxt file routing handles index and nested paths."
    },
    {
      "title": "Find the incorrect approach for head tags",
      "options": [
        {
          "id": "1",
          "text": "useHead({ title: 'About' })"
        },
        {
          "id": "2",
          "text": "useSeoMeta({ ogTitle: 'About' })"
        },
        {
          "id": "3",
          "text": "Direct DOM manipulation in `onMounted` only"
        }
      ],
      "correctId": "3",
      "explanation": "Use Nuxt head utilities for SSR."
    },
    {
      "title": "Add an alias path to a page",
      "options": [
        {
          "id": "1",
          "text": "definePageMeta({ alias: ['/welcome'] })"
        },
        {
          "id": "2",
          "text": "app.config.ts -> alias: ['/welcome']"
        },
        {
          "id": "3",
          "text": "No option is correct"
        }
      ],
      "correctId": "1",
      "explanation": "Per-page alias via `definePageMeta`."
    },
    {
      "title": "True or False: `error.vue` can access the error via `useError()`.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "Use `useError()` in `error.vue`."
    },
    {
      "title": "Provide and use an injected helper",
      "options": [
        {
          "id": "1",
          "text": "// plugins/hello.ts provide $hello"
        },
        {
          "id": "2",
          "text": "// component: const { $hello } = useNuxtApp(); $hello()"
        },
        {
          "id": "3",
          "text": "All options are correct"
        }
      ],
      "correctId": "3",
      "explanation": "Define in a plugin and access via `useNuxtApp()`."
    },
    {
      "title": "Use `useFetch` with a typed return",
      "options": [
        {
          "id": "1",
          "text": "const { data } = await useFetch<User[]>('/api/users')"
        },
        {
          "id": "2",
          "text": "const data: User[] = await useFetch('/api/users')"
        },
        {
          "id": "3",
          "text": "const users = useFetch<User[]>('/api/users').value"
        }
      ],
      "correctId": "1",
      "explanation": "`useFetch<T>` returns refs; destructure `data`."
    },
    {
      "title": "Enable payload extraction for SSG (experimental)",
      "options": [
        {
          "id": "1",
          "text": "experimental: { payloadExtraction: true } in nuxt.config.ts"
        },
        {
          "id": "2",
          "text": "app: { payload: true } in app.config.ts"
        },
        {
          "id": "3",
          "text": "nitro: { extract: true }"
        }
      ],
      "correctId": "1",
      "explanation": "Payload extraction is under `experimental`."
    },
    {
      "title": "Declare global meta defaults (e.g., title template)",
      "options": [
        {
          "id": "1",
          "text": "app.vue -> useHead({ titleTemplate: '%s Â· Site' })"
        },
        {
          "id": "2",
          "text": "nuxt.config.ts -> app.head.titleTemplate"
        },
        {
          "id": "3",
          "text": "All options are correct"
        }
      ],
      "correctId": "3",
      "explanation": "Both places can define defaults."
    },
    {
      "title": "Redirect in a server handler",
      "options": [
        {
          "id": "1",
          "text": "return sendRedirect(event, '/login', 302)"
        },
        {
          "id": "2",
          "text": "res.redirect('/login')"
        },
        {
          "id": "3",
          "text": "navigateTo('/login')"
        }
      ],
      "correctId": "1",
      "explanation": "Use Nitroâ€™s `sendRedirect`."
    },
    {
      "title": "Invalid statement about `assets/` vs `public/`",
      "options": [
        {
          "id": "1",
          "text": "`assets/` is processed and hashed by Vite"
        },
        {
          "id": "2",
          "text": "`public/` files are accessible via absolute URLs"
        },
        {
          "id": "3",
          "text": "`assets/` files are available at `/` without build"
        }
      ],
      "correctId": "3",
      "explanation": "`assets/` requires build; not served raw."
    },
    {
      "title": "Create a dynamic page for `users/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/users/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[users]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/users/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `products/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/products/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[products]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/products/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `articles/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/articles/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[articles]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/articles/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `categories/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/categories/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[categories]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/categories/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `profiles/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/profiles/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[profiles]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/profiles/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `orders/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/orders/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[orders]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/orders/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `posts/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/posts/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[posts]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/posts/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `tickets/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/tickets/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[tickets]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/tickets/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `events/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/events/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[events]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/events/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `teams/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/teams/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[teams]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/teams/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `docs/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/docs/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[docs]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/docs/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "Create a dynamic page for `photos/[id]`",
      "options": [
        {
          "id": "1",
          "text": "pages/photos/[id].vue"
        },
        {
          "id": "2",
          "text": "pages/[photos]/id.vue"
        },
        {
          "id": "3",
          "text": "pages/photos/_id.vue"
        }
      ],
      "correctId": "1",
      "explanation": "Use bracket syntax for dynamic params."
    },
    {
      "title": "File to implement `POST` at `/api/login`",
      "options": [
        {
          "id": "1",
          "text": "server/api/login.post.ts"
        },
        {
          "id": "2",
          "text": "server/routes/login.post.ts"
        },
        {
          "id": "3",
          "text": "pages/api/login.post.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Use `server/api` with method suffix."
    },
    {
      "title": "File to implement `POST` at `/api/logout`",
      "options": [
        {
          "id": "1",
          "text": "server/api/logout.post.ts"
        },
        {
          "id": "2",
          "text": "server/routes/logout.post.ts"
        },
        {
          "id": "3",
          "text": "pages/api/logout.post.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Use `server/api` with method suffix."
    },
    {
      "title": "File to implement `GET` at `/api/health`",
      "options": [
        {
          "id": "1",
          "text": "server/api/health.get.ts"
        },
        {
          "id": "2",
          "text": "server/routes/health.get.ts"
        },
        {
          "id": "3",
          "text": "pages/api/health.get.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Use `server/api` with method suffix."
    },
    {
      "title": "File to implement `GET` at `/api/users/[id]`",
      "options": [
        {
          "id": "1",
          "text": "server/api/users/[id].get.ts"
        },
        {
          "id": "2",
          "text": "server/routes/users/[id].get.ts"
        },
        {
          "id": "3",
          "text": "pages/api/users/[id].get.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Use `server/api` with method suffix."
    },
    {
      "title": "File to implement `GET` at `/api/users`",
      "options": [
        {
          "id": "1",
          "text": "server/api/users.get.ts"
        },
        {
          "id": "2",
          "text": "server/routes/users.get.ts"
        },
        {
          "id": "3",
          "text": "pages/api/users.get.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Use `server/api` with method suffix."
    },
    {
      "title": "File to implement `POST` at `/api/users`",
      "options": [
        {
          "id": "1",
          "text": "server/api/users.post.ts"
        },
        {
          "id": "2",
          "text": "server/routes/users.post.ts"
        },
        {
          "id": "3",
          "text": "pages/api/users.post.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Use `server/api` with method suffix."
    },
    {
      "title": "File to implement `PATCH` at `/api/orders/[id]/status`",
      "options": [
        {
          "id": "1",
          "text": "server/api/orders/[id]/status.patch.ts"
        },
        {
          "id": "2",
          "text": "server/routes/orders/[id]/status.patch.ts"
        },
        {
          "id": "3",
          "text": "pages/api/orders/[id]/status.patch.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Use `server/api` with method suffix."
    },
    {
      "title": "File to implement `GET` at `/api/orders`",
      "options": [
        {
          "id": "1",
          "text": "server/api/orders.get.ts"
        },
        {
          "id": "2",
          "text": "server/routes/orders.get.ts"
        },
        {
          "id": "3",
          "text": "pages/api/orders.get.ts"
        }
      ],
      "correctId": "1",
      "explanation": "Use `server/api` with method suffix."
    },
    {
      "title": "True or False: Components in `components/` are auto-registered.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt basics."
    },
    {
      "title": "True or False: Composables in `composables/` need manual imports.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "2",
      "explanation": "Nuxt basics."
    },
    {
      "title": "True or False: `public/` assets are processed by Vite.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "2",
      "explanation": "Nuxt basics."
    },
    {
      "title": "True or False: `assets/` is intended for files processed by the bundler.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt basics."
    },
    {
      "title": "True or False: `definePageMeta` can set aliases.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt basics."
    },
    {
      "title": "True or False: `useHead` can only be used in pages.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "2",
      "explanation": "Nuxt basics."
    },
    {
      "title": "True or False: `ClientOnly` prevents SSR for its children.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt basics."
    },
    {
      "title": "True or False: `navigateTo` can be awaited.",
      "options": [
        {
          "id": "1",
          "text": "true"
        },
        {
          "id": "2",
          "text": "false"
        }
      ],
      "correctId": "1",
      "explanation": "Nuxt basics."
    }
  ]
}